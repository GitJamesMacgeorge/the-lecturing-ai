import os, json, google.generativeai as genai

SETTINGS_CONFIG_FILE = "settings.json"

def retrieveApiKey():
    if not os.path.isfile(SETTINGS_CONFIG_FILE):
        raise Exception(f"Error: {SETTINGS_CONFIG_FILE} doesn't exist")
    
    with open(SETTINGS_CONFIG_FILE, "r") as f:
        data = json.load(f)
    
    return data

def googleGem(pdf_text:str, response_type:bool, answer_mode:bool, difficulty:int):
    # Setup Google Gemini
    api_key = retrieveApiKey()["google_api_key"]
    genai.configure(api_key = api_key)
    model = genai.GenerativeModel("gemini-1.5-flash")

    # Generate Response for Practice Exam
    if (response_type) and (not answer_mode):
        # Generate Practice Exam
        response = model.generate_content(f"Below is a practice exam. I want you to create another practice exam that is similar to this but harder. Here is the practice exam:\n{pdf_text}")
    elif response_type and answer_mode:
        response = model.generate_content(f"Below is a practice exam that you generated. I want you to generate me markdown text that gives me the answers to the exam that was generated by you. Here is the exam:\n{pdf_text}")
    elif (not response_type):
        response = model.generate_content(f"Below are lecture notes. I want you to generate me markdown text that summarises these lecture notes but don't make me miss out on information. You can include your own knowledge in this markdown text. Here are the lecture notes:\n{pdf_text} ")
    
    return response.text
